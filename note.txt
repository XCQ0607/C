
2760
题目：
给你一个下标从 0 开始的整数数组 nums 和一个整数 threshold 。
请你从 nums 的子数组中找出以下标 l 开头、下标 r 结尾 (0 <= l <= r < nums.length) 且满足以下条件的 最长子数组 ：
nums[l] % 2 == 0
对于范围 [l, r - 1] 内的所有下标 i ，nums[i] % 2 != nums[i + 1] % 2
对于范围 [l, r] 内的所有下标 i ，nums[i] <= threshold
以整数形式返回满足题目要求的最长子数组的长度。
注意：子数组 是数组中的一个连续非空元素序列。

流程：
输入：nums = [3,2,5,4], threshold = 5
初始化 res = 0。
外层循环 l 从 0 开始：
l = 0:
内层循环 r 从 0 开始：
r = 0，子数组 [3]，不满足条件。
r = 1，子数组 [3, 2]，不满足条件。
r = 2，子数组 [3, 2, 5]，不满足条件。
r = 3，子数组 [3, 2, 5, 4]，不满足条件。
l = 1:
内层循环 r 从 1 开始：
r = 1，子数组 [2]，满足条件，更新 res = 1。
r = 2，子数组 [2, 5]，满足条件，更新 res = 2。
r = 3，子数组 [2, 5, 4]，满足条件，更新 res = 3。
l = 2:
内层循环 r 从 2 开始：
r = 2，子数组 [5]，不满足条件。
r = 3，子数组 [5, 4]，不满足条件。
l = 3:
内层循环 r 从 3 开始：
r = 3，子数组 [4]，满足条件，但长度小于当前 res。
最终返回 res = 3。

-----------------------------------------------------

2784
题目：
给你一个整数数组 nums ，如果它是数组 base[n] 的一个排列，我们称它是个 好 数组。
base[n] = [1, 2, ..., n - 1, n, n] （换句话说，它是一个长度为 n + 1 且包含 1 到 n - 1 恰好各一次，包含 n  两次的一个数组）。比方说，base[1] = [1, 1] ，base[3] = [1, 2, 3, 3] 。
如果数组是一个好数组，请你返回 true ，否则返回 false 。
注意：数组的排列是这些数字按任意顺序排布后重新得到的数组。

示例 1：
输入：nums = [2, 1, 3]
输出：false
解释：因为数组的最大元素是 3 ，唯一可以构成这个数组的 base[n] 对应的 n = 3 。但是 base[3] 有 4 个元素，但数组 nums 只有 3 个元素，所以无法得到 base[3] = [1, 2, 3, 3] 的排列，所以答案为 false 。
示例 2：
输入：nums = [1, 3, 3, 2]
输出：true
解释：因为数组的最大元素是 3 ，唯一可以构成这个数组的 base[n] 对应的 n = 3 ，可以看出数组是 base[3] = [1, 2, 3, 3] 的一个排列（交换 nums 中第二个和第四个元素）。所以答案为 true 。
示例 3：
输入：nums = [1, 1]
输出：true
解释：因为数组的最大元素是 1 ，唯一可以构成这个数组的 base[n] 对应的 n = 1，可以看出数组是 base[1] = [1, 1] 的一个排列。所以答案为 true 。
示例 4：
输入：nums = [3, 4, 4, 1, 2, 1]
输出：false
解释：因为数组的最大元素是 4 ，唯一可以构成这个数组的 base[n] 对应的 n = 4 。但是 base[n] 有 5 个元素而 nums 有 6 个元素。所以答案为 false 。

解答：
int cmp(const void*a, const void *b)
{
    return *(int *)b - *(int *)a;
}
bool isGood(int* nums, int numsSize){
    qsort(nums, numsSize, sizeof(int), cmp);
    if (nums[0] + 1 == numsSize && nums[0] == nums[1]) {
        for (int i = 1; i < numsSize - 1; i++) {
            if (nums[i] == nums[i + 1] + 1) {
            } else {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}

输入：nums = [2, 1, 3]，请详细分析代码执行流程


qsort 函数
qsort 是 C 标准库中的一个函数，用于对数组进行快速排序。它的定义在 <stdlib.h> 头文件中。qsort 函数使用快速排序算法对数组进行排序，具有较高的效率。
函数原型
void qsort(void *base, size_t num, size_t size, int (*compar)(const void *, const void *));
参数说明
base：指向要排序的数组的指针。
num：数组中元素的个数。
size：每个元素的大小（以字节为单位）。
compar：指向比较函数的指针。比较函数用于确定两个元素的相对顺序。
在 C 标准库中，qsort 函数是一个通用的排序函数，它可以对任意类型的数组进行排序。由于不同类型的数据需要不同的比较方式，标准库并没有提供特定类型的比较函数，而是要求用户自己定义比较函数并传递给 qsort。
自定义比较函数的作用是告诉 qsort 如何比较两个元素。比较函数的返回值决定了两个元素的相对顺序
比较函数的原型如下：
int compar(const void *a, const void *b);
a 和 b 是指向要比较的两个元素的指针。
返回值：
如果 a 应该排在 b 之前，返回负值。
如果 a 和 b 相等，返回 0。
如果 a 应该排在 b 之后，返回正值。
标准大小排序
int cmp(const void*a, const void *b)
{
    return *(int *)b - *(int *)a;       //返回负值则a，b不调换位置，按降序排列
}
或
   int cmp(const int *a, const int *b) {
       return *a - *b;
   }

流程：
输入：nums = [2, 1, 3]
调用 qsort 对 nums 进行降序排序，结果为 [3, 2, 1]。
检查 nums[0] + 1 == numsSize 和 nums[0] == nums[1]：
nums[0] + 1 == 3 + 1 == 4，但 numsSize == 3，条件不满足。
返回 false。

-------------------------------------------

2894
题目:
给你两个正整数 n 和 m 。
现定义两个整数 num1 和 num2 ，如下所示：
num1：范围 [1, n] 内所有 无法被 m 整除 的整数之和。
num2：范围 [1, n] 内所有 能够被 m 整除 的整数之和。
返回整数 num1 - num2 。

示例 1：
输入：n = 10, m = 3
输出：19
解释：在这个示例中：
- 范围 [1, 10] 内无法被 3 整除的整数为 [1,2,4,5,7,8,10] ，num1 = 这些整数之和 = 37 。
- 范围 [1, 10] 内能够被 3 整除的整数为 [3,6,9] ，num2 = 这些整数之和 = 18 。
返回 37 - 18 = 19 作为答案。
示例 2：
输入：n = 5, m = 6
输出：15
解释：在这个示例中：
- 范围 [1, 5] 内无法被 6 整除的整数为 [1,2,3,4,5] ，num1 = 这些整数之和 =  15 。
- 范围 [1, 5] 内能够被 6 整除的整数为 [] ，num2 = 这些整数之和 = 0 。
返回 15 - 0 = 15 作为答案。
示例 3：
输入：n = 5, m = 1
输出：-15
解释：在这个示例中：
- 范围 [1, 5] 内无法被 1 整除的整数为 [] ，num1 = 这些整数之和 = 0 。 
- 范围 [1, 5] 内能够被 1 整除的整数为 [1,2,3,4,5] ，num2 = 这些整数之和 = 15 。
返回 0 - 15 = -15 作为答案。

解答：
int differenceOfSums(int n, int m) {
  return (n * (n + 1) >> 1) - n / m * (n / m + 1) * m;
}

流程：
输入：n = 10, m = 3时，代码运行的完整执行逻辑？

示例分析
输入：n = 10, m = 3
计算步骤
计算范围 [1, 10] 内所有整数的和：
使用公式 n * (n + 1) / 2 = 55
由于位运算的优先级较低，代码中使用了 >> 1 代替 / 2，即 (n * (n + 1) >> 1)。代码中使用 (n * (n + 1) >> 1)：
计算范围 [1, 10] 内所有能够被 3 整除的整数之和：
计算能够被 3 整除的最大整数 k：10/3 = 3
计算这些整数的和，使用公式 m * k * (k + 1) / 2 * 2：
原本范围 [1, 10] 内能够被 3 整除的整数为 [3,6,9]，但是现在用10/3得出能够被整除的个数为3个，并求和3*[1,2,3]*2，这样的话就相当于
[1,10]求和 - 3*[1,2,3]*2,符合题意

----------------------------------------------------

2706
题目：
给你一个整数数组 prices ，它表示一个商店里若干巧克力的价格。同时给你一个整数 money ，表示你一开始拥有的钱数。
你必须购买 恰好 两块巧克力，而且剩余的钱数必须是 非负数 。同时你想最小化购买两块巧克力的总花费。
请你返回在购买两块巧克力后，最多能剩下多少钱。如果购买任意两块巧克力都超过了你拥有的钱，请你返回 money 。注意剩余钱数必须是非负数。

示例 1：
输入：prices = [1,2,2], money = 3
输出：0
解释：分别购买价格为 1 和 2 的巧克力。你剩下 3 - 3 = 0 块钱。所以我们返回 0 。
示例 2：
输入：prices = [3,2,3], money = 3
输出：3
解释：购买任意 2 块巧克力都会超过你拥有的钱数，所以我们返回 3 。

解答：
int cmp(const int *a, const int *b) {
    return *a - *b;
}

int buyChoco(int* prices, int pricesSize, int money){
    qsort(prices, pricesSize, sizeof(int), cmp);

    if(prices[0] + prices[1] > money) {
        return money;
    }

    return money - prices[0] - prices[1];
}

流程：
输入：prices = [1,2,2], money = 3,请回答代码运行的完整执行逻辑是什么？

----------------------------------------------------

2600
题目：
袋子中装有一些物品，每个物品上都标记着数字 1 、0 或 -1 。
给你四个非负整数 numOnes 、numZeros 、numNegOnes 和 k 。
袋子最初包含：
numOnes 件标记为 1 的物品。
numZeros 件标记为 0 的物品。
numNegOnes 件标记为 -1 的物品。
现计划从这些物品中恰好选出 k 件物品。返回所有可行方案中，物品上所标记数字之和的最大值。

示例 1：
输入：numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2
输出：2
解释：袋子中的物品分别标记为 {1, 1, 1, 0, 0} 。取 2 件标记为 1 的物品，得到的数字之和为 2 。
可以证明 2 是所有可行方案中的最大值。
示例 2：
输入：numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4
输出：3
解释：袋子中的物品分别标记为 {1, 1, 1, 0, 0} 。取 3 件标记为 1 的物品，1 件标记为 0 的物品，得到的数字之和为 3 。
可以证明 3 是所有可行方案中的最大值。

解答：
int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k){
    if (k <= numOnes)
        return k;
    else if(k <= (numOnes+numZeros))
        return numOnes;
    return numOnes-(k-numOnes-numZeros);
}

流程：
输入：numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2，请回答代码运行的完整执行逻辑是什么？

----------------------------------------------------

2331
题目：
给你一棵 完整二叉树 的根，这棵树有以下特征：
叶子节点 要么值为 0 要么值为 1 ，其中 0 表示 False ，1 表示 True 。
非叶子节点 要么值为 2 要么值为 3 ，其中 2 表示逻辑或 OR ，3 表示逻辑与 AND 。
计算 一个节点的值方式如下：
如果节点是个叶子节点，那么节点的 值 为它本身，即 True 或者 False 。
否则，计算 两个孩子的节点值，然后将该节点的运算符对两个孩子值进行 运算 。
返回根节点 root 的布尔运算值。

完整二叉树 是每个节点有 0 个或者 2 个孩子的二叉树。
叶子节点 是没有孩子的节点。

示例 1：
输入：root = [2,1,3,null,null,0,1]
表示树的结构：
        2
       / \
      1   3
         / \
        0   1
输出：true
解释：上图展示了计算过程。
AND 与运算节点的值为 False AND True = False 。
OR 运算节点的值为 True OR False = True 。
根节点的值为 True ，所以我们返回 true 。
示例 2：
输入：root = [0]
输出：false
解释：根节点是叶子节点，且值为 false，所以我们返回 false 。
示例 3：
 输入：root = [2,1,3,null,null,3,3,null,null,0,0] 、//表示了一棵二叉树，按照层序遍历（广度优先遍历）的结果
 树的结构如下：
        2
       / \
      1   3
         / \
        3   3           //root = [2,1,3,null,null,1,3,3,3,0,0]由于没有子节点，返回 True（因为没有子节点的 AND 运算结果为 True）
           / \
          0   0
根节点的值为 True，所以返回 true

 解答：
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool evaluateTree(struct TreeNode* root){   //传入struct TreeNode类型的root[]       root = [2,1,3,null,null,0,1]
    if (root == NULL) {
        return false; // 或者根据具体需求返回其他值
    }
    if(root -> val == 1){
        return true;
    }
    else if(root -> val == 0){
        return false;
    }
    bool left = evaluateTree(root -> left);     //函数_1 left == 1->函数_2 val == 1 return true
    bool right = evaluateTree(root -> right);   //函数_1 right == 3->函数_2 val == 3 return false->函数_3 val== 3  (left == 0->函数_5 val == 0 return false) (right == 1->函数_6 val == 1 return true) return 0
    if(root -> val == 2){           //函数_1 return 1
        return left || right;
    }
    else if(root -> val == 3){
        return left && right;
    }
    return false;
}

流程：
联系代码，告诉我执行的每一步调用了哪一行代码



二叉数：
root = [2,1,3,null,null,1,3,3,3,0,0]
        2
       / \
      1   3
         / \
        1   3
       / \
      3   3
     / \
    0   0
root = [2,1,3,null,null,1,3,null,null,3,3,0,0]
         2
       / \
      1   3
         / \
        1   3
           / \
          3   3
         / \
        0   0

--------------------------------------------------------------------------
2389
题目：
给你一个长度为 n 的整数数组 nums ，和一个长度为 m 的整数数组 queries 。
返回一个长度为 m 的数组 answer ，其中 answer[i] 是 nums 中 元素之和小于等于 queries[i] 的 子序列 的 最大 长度  。
子序列 是由一个数组删除某些元素（也可以不删除）但不改变剩余元素顺序得到的一个数组。

示例 1：
输入：nums = [4,5,2,1], queries = [3,10,21]
输出：[2,3,4]
解释：queries 对应的 answer 如下：
- 子序列 [2,1] 的和小于或等于 3 。可以证明满足题目要求的子序列的最大长度是 2 ，所以 answer[0] = 2 。
- 子序列 [4,5,1] 的和小于或等于 10 。可以证明满足题目要求的子序列的最大长度是 3 ，所以 answer[1] = 3 。
- 子序列 [4,5,2,1] 的和小于或等于 21 。可以证明满足题目要求的子序列的最大长度是 4 ，所以 answer[2] = 4 。
示例 2：
输入：nums = [2,3,4,5], queries = [1]
输出：[0]
解释：空子序列是唯一一个满足元素和小于或等于 1 的子序列，所以 answer[0] = 0 。

解答：
int* answerQueries(int* nums, int numsSize, int* queries, int queriesSize, int* returnSize) {
    qsort(nums, numsSize, sizeof(int), cmp);

    for(int i = 1; i < numsSize; i++)
        nums[i] += nums[i - 1];

    for(int i = 0; i < queriesSize; i++){
        int left = 0, right = numsSize - 1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(nums[mid] <= queries[i])
                left = mid + 1;
            else
                right = mid - 1;
        }
        queries[i] = left;
    }
    *returnSize = queriesSize;

    return queries;
}